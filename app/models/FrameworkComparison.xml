<?xml version="1.0" standalone="yes" ?>
<PlayContent>
<Title>Framework Comparisons</Title>
	<Heading name="Django vs. Play">
		<Info> Django and Play are web frameworks that use Python and Java as their programming languages respectively[1]. Both of them use Model-View-Controller architecture[1]. Django is fairly old framework as compared to Play since it was created in 2003 whereas play was created in 2007[1]. Both of them are cross-platform compatible and are open source but under different licenses since Django is under BCD licence while play is under Apache License 2[1]. These two web frameworks come with selenium test framework integrated within, which makes the testing process really easy because the browser is used to run the tests[2]. The environment installation for Django on windows is not an easy process which includes: Python, Django, WAMP and  Aptana Studio (IDE) as compared to play environment installation on windows which includes: JDK, Play, Eclipse and Config[3]. Both of these frameworks have good documentations available to guide the users through the installation steps and other discussion communities such as stackoverflow to help answer the development problems one faces through while working with these web frameworks[3]. Thus, these two have pretty similar features and the choice of framework entirely depends on the programming language you are comfortable coding in.
		</Info>
	</Heading>
	<Heading name="ASP.Net vs. Play">
		<Info> ASP.net is build for large enterprise projects, which explains its backing by Microsoft and reduces the time to build a large project with its feature of combining HTML and source code to reduce the amount of code [4]. It is very easy to set up like Play, one just needs to install Visual Studio and the ASP.net MVC 4 plugin. It is very easy to deploy as it uses the Windows Azure Server service. Windows Azure is not free however and one is restricted with daily server access limits unless one pays for a subscription.  The deployment process is similar to Play in that one has to setup the code and files and let the framework run.  ASP.net like Play uses the MVC framework, which is an intutitive and straight forward framework to use for web development.  ASP.net is C# or Visual Basic based unlike Play, which is Java and Javascript based, so there is a slight learning curve for developing ASP.net if one has never learned C# or Basic. ASP.net has support for Ajax, jQuery and Juice UI. On a side note, ASP is heavily backed by Microsoft and there are official tutorials and forums provided by Microsoft to support ASP developers. Some features included in ASP.net that are not featured in other frameworks is that ASP.net is it utilizes early binding, just in time compilation and native optimization for better performance and it closely monitors the web pages and apps running on it to detect memory leaks, illegal activities and infinite loops, it will immediately stop these activities and restart itself [4] [5].  ASP.net is a great platform to use for these reasons. 
		</Info>
	</Heading>
	<Heading name="Ruby on Rails vs. Play">
		<Info> vsChart.com provides a fairly extensive list of properties being compared between Play! and Ruby on Rails[6]. Not surprisingly, Ruby on Rails and Play! have a great deal in common. The main differences that stand out between the two MVC frameworks are the programming languages used; Ruby on Rails uses Ruby, a dynamic general purpose programming language and Play! uses Java and Scala, a static object oriented/functional programming language environment[6]. One of the major downfalls of Play! that developers (having experience with both Ruby on Rails and Play!) have found, is that Play! lacks the plugins that Ruby on Rails already has[7]. Ruby on Rails utilizes something called “gems” that are easy to use, easy to install and are used to load plugins. Developers using Play! find that they have to re-invent plugins that already exist in Ruby on Rails[7]. Play! and Ruby on Rails both have good IDEs that help with proper code completion and syntax checking. Ruby on Rails has an excellent feature rich IDE called RubyMine and Play! has an equally good IDE support in IntelliJ. Both IDEs require a purchased license for full access.
		vsChart.com rates the difficulty level for Play! as beginner, intermediate and advanced[6]. Ruby On Rails is rated as advanced and master[6]. The target audience as outlined on VSChart.com for Play! is “enterprise”, whereas Ruby on Rails specifies web development, app developer, media and publishing sector and system administration for the target audiences[6].
		</Info>
	</Heading>
	<Heading name="Spring vs. Play">
		<Info> Play and Spring are frameworks that use Java as their core programming language . Both Spring and Play are fairly huge and complex with multiple elements and configurations making them entire ecosystems rather than just frameworks. While the play ecosystem comes with all the parts included in the package, many parts of Spring have to be purchased, making it not available for everyone[8]. The best feature about play is that even though it is new it has great documentation and tutorials for beginners.On the other hand, Spring lacks rapid prototyping as it is massive and hard to grasp with poor documentation [8]. Play has some improvements, such as it uses Coffeescript and LESS CSS in Scala over the traditional Javascript and CSS. Spring does not have any such new enhancements, though the templating language is easy to use and understand. As far as maintaining code is concerned, Spring doesn’t have the most readable code as it prefers configuration over convention, however it does have annotations and useful markups, that make it easier to do the same.[8] Play is a convention over configuration framework, so code readability and maintainability is not a very hard job. Summarizing, both the frameworks are equally good for Java developers working on large projects. 
		</Info>
	</Heading>
	<Heading name="Struts vs. Play">
		<Info> Struts is an ongoing, Java-based MVC framework created by the volunteers in the well-known Apache Software Foundation [9] . The 2.x branch of Play was first released on August 2013 [10], while the Struts 2.x branch was first released in February 2007 [11]. This substantial time difference means that Play gains quite the advantage from utilizing the latest technology demands, trends and hardware specs. For example, Play includes a local-hosted IDE with one-click automated compile and deployment, something that Struts2 doesn’t have. This, along with the ready-to-use, step-by-step tutorials that can be fetched directly with the IDE, makes it really easy, quick, and painless to start a new Play project. In contrast, for Struts, one has to individually set up the IDE, compilation, and deployment manually while also trying to understand how all the pieces fit together at the same time [12, 13]. However, despite all the advances, it is worth noting that Play 2.x and Struts 2.x still often suffer from backwards-compatibility issues vs previous versions [14, 15]. RebelLabs suggests that, in spite of the the flaws of Struts, it still leads in 2012 usage share by 9% compared to Play [8]. This suggests that developers are wary from moving away from the maturity and familiarity of Struts. At the same time, it is difficult to gauge which popular websites actually use Struts given that Apache doesn’t list any references on their website. Play, on the other hand, is not shy about declaring that theGuardian, the second largest online English newspaper, as well as LinkedIn, a well known professional networking site, are using their framework [16]
		</Info>
	</Heading>
	<Heading name="Web2Py vs. Play">
		<Info> web2py and Play! are both full stack MVC web development frameworks. It seems that these two frameworks were developed with a similar goal in mind: simpler web development. They actually boast a lot of the same features [17]. However, if you intend to build something long lasting, web2py might actually be better, since the developers designed web2py to be backward compatible [18]. In contrast, Play! version 2 is not compatible with Play! version 1 [17]. Web2py will be better for large scale applications that use many databases for redundancy thanks to the database abstraction layer[19]. Play! does not come with a built in database management component, so you either need to do it manually using JDBC or download a plug-in [17]. Play! does provide the option for developers who are more comfortable with functional programming to design their web site in a more familiar environment through Scala [17].  Projects in Play! can be made using either Java and a Scala based templating language, or just Scala. This last point I know through personal experience, as I have done both. Overall the two frameworks provide fairly similar functionality, so the best idea would be to choose whichever one supports the language and development environment you are most comfortable with. 
		</Info>
	</Heading>

	<Heading name="References">
		<Info> [1] Florian Heinze (2008). Play Framework vs. Django [Online], http://vschart.com/compare/play-framework/vs/django-framework (Accessed: 26 June 2014) </Info>
		<Info> [2] Matt Cottingham (2012, Jan 31). A Django Developer’s First Experience of Play [Online], http://blueprintforge.com/blog/2012/01/31/a-django-developers-first-experience-of-play/ (Accessed: 26 June 2014) </Info>
		<Info> [3] Diogo Nunes (2014, May 26). Rails vs. Django vs. Play : Battle of frameworks [Online], http://www.diogonunes.com/blog/rails-vs-django-vs-play-frameworks/ (Accessed: 26 June 2014) </Info>
		<Info> [4] 12 Advantages of ASP.Net, SeekDotNet [Online] 2014, http://blog.seekdotnet.com/asp-net/12-advantages-of-asp-net/ (Accessed: 24 June 2014). </Info>
		<Info> [5] ASP.net is a programming framework, Fulcrum. [Online] 2014, http://www.fulcrumsolutions.co.in/asp.html (Accessed: 25 June 2014). </Info>
		<Info> [6] vsChart. “Play! Framework vs. Ruby on Rails,”  vsChart.com. [Online]. Available: http://vschart.com/compare/play-framework/vs/ruby-on-rails [Accessed: 26 June 2014]. </Info>
		<Info> [7] D. Buchanan. “Play!Framework vs Ruby on Rails”. 15 Jan 2013. [Blog entry]. dillionbuchanan.com. Available: http://dillonbuchanan.com/programming/playframework-vs-ruby-on-rails/ [Accessed: 26 June 2014]. </Info>
		<Info> [8] S. Maple, "The 2014 Decision Maker's guide to Java web frameworks", (ZeroTurnAround) [Online] 2013, http://zeroturnaround.com/rebellabs/the-2014-decision-makers-guide-to-java-web-frameworks/ (Accessed: 27 June, 2014) </Info>
		<Info> [9] About Apache Struts 2, The Apache Software foundation, [Online] 2013, http://struts.apache.org/development/2.x/ (Accessed: 25 June 2014) </Info>
		<Info> [10] Struts, The Apache Software Foundation, [Online] 2000, http://struts.apache.org/downloads.html (Accessed: 26 June 2014) </Info>
		<Info> [11] Downloads, Play, [Online], http://www.playframework.com/download (Accessed: 26 June 2014) </Info>
		<Info> [12] How to create a Struts 2 Web Application, Apache Struts 2 documentation, [Online], http://struts.apache.org/development/2.x/docs/how-to-create-a-struts-2-web-application.html (Accessed: 26 June 2014) </Info>
		<Info> [13] Create Struts 2 Web Application Using Maven To Manage Artifacts and To Build The Application, Apache Struts 2 Documentation, [Online],  http://struts.apache.org/development/2.x/docs/create-struts-2-web-application-using-maven-to-manage-artifacts-and-to-build-the-application.html (Accessed: 26 June 2014) </Info>
		<Info> [14] Impressions of Play! Framework 1.2.4 vs 2.0, awfbeat Staff Blog, [Online] 2012, http://blog.awfbeat.com/post/22314115684/impressions-of-play-framework-1-2-4-vs-2-0 (Accessed: 26 June 2014) </Info>
		<Info> [15] Migration Stategies, Apache Struts 2 Documentation, [Online] 2010, http://struts.apache.org/release/2.1.x/docs/migration-strategies.html (Accessed: 26 June 2014) </Info>
		<Info> [16] The High Velocity Web framework for Java and Scala, Play, [Online], http://www.playframework.com/ (Accessed: June 27 2014) </Info>
		<Info> [17] Florian Heinze, web2py vs. Play! Framework [Online] 2008, http://vschart.com/compare/web2py/vs/play-framework (Accessed: 26 June 2014) </Info>
		<Info> [18] web2py, What is web2py? [Online] 2014, http://www.web2py.com/init/default/what (Accessed: 26 June 2014) </Info>
		<Info> [19] Massimo Di Pierro, Chapter 6: The Database Abstraction Layer [Online] 2014, http://web2py.com/books/default/chapter/29/06/the-database-abstraction-layer (Accessed: 26 June 2014) </Info>
	</Heading>
	
</PlayContent>